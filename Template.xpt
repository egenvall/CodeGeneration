«IMPORT configurator»
«DEFINE main FOR Configuration»
«EXPAND  typo FOR rootTopic»
«ENDDEFINE»
«DEFINE typo FOR TopicType»

	«FILE "test.html"»
		<!DOCTYPE html>
		<html lang="en">
		<head>
		<meta charset="UTF-8">
		<title>j«this.name» Configuration</title>
		<style>
		html { margin:0; padding:0; font-size:62.5%; }
		body { max-width:800px; min-width:300px; margin:0 auto; padding:20px 10px; font-size:14px; font-size:1.4em; }
		h1 { font-size:1.8em; }
		.demo { overflow:auto; border:1px solid silver; min-height:100px; }
		</style>
		<link rel="stylesheet" href="../../WebsiteFiles/dist/themes/default/style.min.css" />
    	<link rel="stylesheet" href="../../WebsiteFiles/style.css"/>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script>
		<script src="../../WebsiteFiles/jstree.min.js"></script>
		</head>
		 
		<body>
		<div id="html" class="demo">

		   
		   «EXPAND type FOR this»
		
		   </div>
		   <button id="button">Summary</button>




	<script>
  $(document).ready(function () {
 $("#html li").data('jstree', {opened: true});
$("#html").jstree({
    "checkbox": {
        "keep_selected_style": false,
        "visible" : true,
        "three_state": true,
        "whole_node" : true,
                },
   "core": {
        "themes":{
            "icons":false
        }
    },
    "plugins": ["checkbox","ui","themes"],
          });


      function pluckByName(inArr, id){

            for (i = 0; i < inArr.length; i++ ){

                if (inArr[i] == id)
                {
                    console.log(inArr[i] + "==" + id);
                    return true;
                }
            }
          return false;

    }



$("#button").click(function () {

     function iterateTree(li){
         var success = true;

          //elem.each(function(index,li){
                li = $(li);
              /*Check madatory*/
              if(li.is(".hasBounds") && li.find('.yesno, input').length == 0){
                  var lower= li.data("low");
                  var upper = li.data("high");

                 var counter = 0;
                  li.find("> ul > li").each(function(index, elem){

                    if($("#html").jstree(true).is_selected(elem) || $("#html").jstree(true).is_undetermined(elem)){

                        counter++;
                        if(!iterateTree(elem)){
                            success = false;
                          }
                  }

                  });

                  if(counter >= lower && counter <= upper){
                      /*ok*/


                  }
                  else{
                      success = false;
                      li.addClass('error');
                      console.log("Violation");
                  }
                }

 
          //});

        return success;
      }


        var result = "";
    $("#html li").removeClass('error');
    $("#html > ul > li").each(function(idx,el){result += iterateTree(el);});

		var checkFoFalse = (result.indexOf("false") > -1);
		if(!checkFoFalse){
			var listChecked = ($('#html').jstree(true).get_checked(true));
			document.write('&lt;?xml version="1.0" encoding="UTF-8"?><br>');
			document.write('&lt;Feature:«this.name»><br>');
				$.each(listChecked,function(i,node){

					if(node.children.length > 0){
					 /*TODO CHECK IF MANDATORY-*/
					}
					else{
							//Leaf
						if(node.text.indexOf("input")> -1){
							var cutPlaceStart = node.text.indexOf(">")
							var cutPlaceEnd = node.text.indexOf("</span>")
							document.write('&lt;enabledfeature name='+ node.parents.slice(0,node.parents.length-1)+ ' '+ node.text.slice(cutPlaceStart+1,cutPlaceEnd) +' /><br>');
						}
						else{
							document.write('&lt;enabledfeature name='+ node.parents.slice(0,node.parents.length-1)+ ' '+ node.text +' /><br>');
						}
					}
			});
			document.write('&lt;/Feature:«this.name»>');
		}


});





});




  </script>
</body>
</html>

	«ENDFILE»

 «ENDDEFINE»
 «DEFINE type FOR TopicType»
	<!-- FOR A TOPICTYPE -->
	
		  <!--IF NOT ABSTRACT, ADD NODE <LI> -->
		
		<!--IF THIS TOPICTYPE HAS ALTERNATIVES, ADD THEM AS CHILDREN -->
		«IF !this.isAbstract || !this.alternatives.isEmpty || !this.extendedBy.isEmpty || !this.validates.isEmpty»<ul>«ENDIF»
		
		
		«IF !this.isAbstract»<li><span class="label">«this.name»</span></li>«ENDIF»
			
			«EXPAND alternative FOREACH this.alternatives»
			
		
		<!-- IS IT EXTENDED? CALL TO TOPICTYPE, ADD FINDINGS THERE AS CHILDREN --> 
		«IF !this.extendedBy.isEmpty»
			
			«EXPAND type FOREACH this.extendedBy»
			
		«ENDIF»
		
		«IF !this.validates.isEmpty»
			
			«EXPAND expr FOREACH this.validates»
			
		«ENDIF»
		«IF !this.alternatives.isEmpty || !this.extendedBy.isEmpty || !this.validates.isEmpty»</ul>«ENDIF»
		  
		  
		  
	
«ENDDEFINE»
 «DEFINE expr FOR Expr»
<!-- Shouldnt happen -->
 «ENDDEFINE»
 
  «DEFINE expr FOR OperatorExpr»
  <!-- > -->
 <li>«this.type»
 «EXPAND expr FOREACH this.subExprs»
 </li>
 
 
 
 «ENDDEFINE»
  «DEFINE expr FOR SymbolExpr»
  <!-- Alternative -->
  
 <li>«this.refersTo»</li>
 «ENDDEFINE»
 
  «DEFINE expr FOR LiteralExpr»
  <!-- 4 -->
 <li>«this.value»</li>
 «ENDDEFINE»
 
 
«DEFINE alternative FOR Alternative»
	<!-- Add to subnode -->
	<li id="«this.name»"
	 data-low="«this.lowerBound»"
	 data-high="«this.upperBound»"
	 class = "hasBounds"
	 ><span class="label">«this.name»</span> 
	<!-- Call for the Alternatives Type -->
	«EXPAND type FOR this.type»
	</li>
«ENDDEFINE»


«DEFINE type FOR Type»

«IF this.name == "YesNo"»
	<ul>  
	<li class="yesno" >Yes</li>
	
	</ul>
	«ENDIF»
«ENDDEFINE»

«DEFINE type FOR EnumType»
	<ul>
		«FOREACH this.literals AS e»
			<li>«e.name»</li>
		«ENDFOREACH»
	</ul>
«ENDDEFINE»

«DEFINE type FOR UnitType»
 
	    
	    <input type="number" min="«this.lowerLimit»" max="«this.upperLimit»" step="«this.step»" />«this.unitName»
	    
«ENDDEFINE»
«DEFINE type FOR NumberType»
    
	    
	    <input type="number" min="«this.lowerLimit»" max="«this.upperLimit»" step="«this.step»" />
	    
«ENDDEFINE»
